<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ponderings of an Andy</title><link href="http://andrewwegner.com/" rel="alternate"></link><link href="http://andrewwegner.com/feeds/technical-solutions.atom.xml" rel="self"></link><id>http://andrewwegner.com/</id><updated>2012-04-16T00:00:00-05:00</updated><entry><title>Connect Python to OSI Soft PI</title><link href="http://andrewwegner.com/connect-python-to-osi-soft-pi.html" rel="alternate"></link><updated>2012-04-16T00:00:00-05:00</updated><author><name>Andy Wegner</name></author><id>tag:andrewwegner.com,2012-02-07:connect-python-to-osi-soft-pi.html</id><summary type="html">&lt;p&gt;OSI PI is a historian database. I had a task to connect a python application to this database. I asked a question on 
&lt;a href="http://stackoverflow.com/questions/8898114/how-can-i-connect-python-2-6-to-osi-pi"&gt;Stack Overflow&lt;/a&gt; about whether this was a simple problem to solve. After two weeks I still hadn't gotten a viable response,
so I had to build by own solution.&lt;/p&gt;
&lt;p&gt;I did reach out to the vendor first for help. Their response back was not helpful. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looks like pyodbc is written against ODBC 3.x.  The OSI PI ODBC driver is using ODBC 2.0.  The python ODBC driver manager 
will convert most ODBC 3 calls on the fly to ODBC 2 ones. Anything added to 3, however, will obviously fail. You would 
need to find some way to make sure that your only using 2.0 compliant ODBC calls.  Currently their is not a PI ODBC 
driver that is compliant with ODBC 3.0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, it looks like the vendor doesn't support Python (odd, they are named "PI", but I digress). Additionally, the drivers provided 
by the company initially didn't work. &lt;/p&gt;
&lt;p&gt;The code below shows how I was able to finally connect python to OSI PI. It may not be the most elegant, but it 
functions for the purposes of my application. Initially I was attempting to connect using the &lt;a href="https://github.com/mkleehammer/pyodbc"&gt;pyodbc&lt;/a&gt; module. Unfortunately, 
OSI PI would return a message like this:&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;&lt;span class="n"&gt;pyodbc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;IM002&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[IM002] [OSI][PI ODBC][PI]PI-API Error &amp;lt;pilg_getdefserverinfo&amp;gt; 0 (0) (SQLDriverConnectW); [01000] [Microsoft][ODBC Driver Manager] The driver doesn&amp;#39;t support the version of ODBC behavior that the application requested (see SQLSetEnvAttr). (0)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They vendor mentioned that using OLEDB instead may prove more fruitful. Thus, the code below is how I got connected using 
the vendor provided OLDEB driver. The downside is that I also had to do this all through COM objects using &lt;a href="http://python.net/crew/skippy/win32/Downloads.html"&gt;win32com&lt;/a&gt;. 
I'm not knocking the module, because it is extremely useful and I've done some great things with it.&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;win32com.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dispatch&lt;/span&gt;

&lt;span class="n"&gt;oConn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ADODB.Connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ADODB.RecordSet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;oConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Provider=PIOLEDB;Data Source=&amp;lt;server&amp;gt;;User ID=&amp;lt;username&amp;gt;;database=&amp;lt;database&amp;gt;;Password=&amp;lt;password&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;oConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;We&amp;#39;ve connected to the database.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT tag FROM pipoint WHERE tag LIKE &amp;#39;TAG0001%&amp;#39;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;oRS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActiveConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oConn&lt;/span&gt;
    &lt;span class="n"&gt;oRS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;oRS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;#print oRS.Fields.Item(&amp;quot;tag&amp;quot;).Value   # Ability to print by a field name&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;oRS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;        &lt;span class="c"&gt;# Ability to print by a field location&lt;/span&gt;
        &lt;span class="n"&gt;oRS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MoveNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;oRS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;oRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Not connected&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;oConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;oConn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I followed up on my Stack Overflow post about 2 months after posting my solution with the following note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just following up on this after using it for a couple months. This is still the only way I've found to do this with 
python, but it seems to be very slow when I need to run a large number of queries. I suspect it is because I have to 
open/close the database connection for each query, but OSI PI/ADODB complains if I do not. Performance has not reached a 
point where I am forced to rewrite this yet. If/when I do I will follow up again. In the meantime others using this 
solution should be aware that it is slow when running many queries.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="technical"></category></entry><entry><title>Multiple IP addresses on the same physical network card</title><link href="http://andrewwegner.com/multiple-ip-addresses-on-the-same-physical-network-card.html" rel="alternate"></link><updated>2010-11-17T12:54:00-06:00</updated><author><name>Andy Wegner</name></author><id>tag:andrewwegner.com,2010-11-17:multiple-ip-addresses-on-the-same-physical-network-card.html</id><summary type="html">&lt;p&gt;There are times when a server can be allocated more than one IP Address even though it contains only one physical 
network card. To associate these IP addresses with the server some manipulation of networking settings will need to be 
performed. The steps outlined in this walk-through are for RedHat based systems. This tutorial is for statically assigned 
IP Addresses (as a server generally will have).
For this walk through we are going to add one additional IP address to &lt;code&gt;eth0&lt;/code&gt;. Navigate to&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;cd /etc/sysconfig/network-scripts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy &lt;code&gt;ifcfg-eth0&lt;/code&gt; to &lt;code&gt;ifcfg-eth0:0&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;cp ifcfg-eth0 ifcfg-eth0:0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to modify the new file slightly so that it gets it's own IP address. Open &lt;code&gt;ifcfg-eth0:0&lt;/code&gt; in your favorite editor&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;DEVICE=eth0:0           &amp;lt;-- Change this to match the new eth0:0 file we just created
BOOTPROTO=none
BROADCAST=x.x.x.x       &amp;lt;-- This is the broad cast address for the subnet the new IP is on
DNS1=x.x.x.x            &amp;lt;-- This is the main DNS server you are using (example: 64.120.14.26)
GATEWAY=x.x.x.x         &amp;lt;-- This is the gateway address for the subnet the new IP is on
HWADDR=&amp;lt;DO NOT CHANGE&amp;gt;  &amp;lt;-- Don&amp;#39;t change this from what is existing. The Hardware address is the same as the physical one
IPADDR=x.x.x.x          &amp;lt;-- This is your new IP address
NETMASK=x.x.x.x         &amp;lt;-- This is the netmask for the subnet the new IP is on
ONBOOT=yes              &amp;lt;-- Leave to yes
OPTIONS=layer2=1
TYPE=Ethernet
PREFIX=29
DEFROUTE=yes
NAME=&amp;quot;System eth0:0&amp;quot;    &amp;lt;-- Change to reflect new name of device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save your file with the new settings. Now we need to restart the networking service:&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;service network restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the network components come back up you should see your new device in the &lt;code&gt;ifconfig&lt;/code&gt; command. To add more IPs, 
copy and replace values as specified above.&lt;/p&gt;</summary><category term="technical"></category></entry><entry><title>Fixing MYISAM Crashed Tables</title><link href="http://andrewwegner.com/fixing-myisam-crashed-tables.html" rel="alternate"></link><updated>2010-05-14T10:08:00-05:00</updated><author><name>Andy Wegner</name></author><id>tag:andrewwegner.com,2010-05-14:fixing-myisam-crashed-tables.html</id><summary type="html">&lt;p&gt;For various reasons, MyISAM tables are known to crash. When this happens, the following message will be displayed:&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;INVALID SQL: 145 : Table &amp;#39;{something}&amp;#39; is marked as crashed and should be repaired
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've found this error occurs when MySQL is unexpectedly shut down - whether from a power failure to the entire server or 
if MySQL itself has issues and you use the &lt;code&gt;kill&lt;/code&gt; command to stop it. Unexpected shut downs, especially while these tables 
are being used, do not make MyISAM tables happy.&lt;/p&gt;
&lt;p&gt;To fix this, you need the ability to stop MySQL in a controlled manner, and you need to know where the database files 
are stored.&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;locate *.MYI
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will return where all the MYI files are stored. In this example, I am using&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;/var/lib/mysql/mysql/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to the directory of the crashed table using the &lt;code&gt;cd&lt;/code&gt; command. Next, stop MySQL. This is to ensure the tables are not 
accessed while we perform our repair functions. If you don't perform this step, the repair may not succeed.&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;service mysqld stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we are going to perform two repair functions. The first one may take a while depending on the size of your tables.&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;myisamchk -r --force --safe-recover *.MYI
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second repair step is used to ensure all table states are updated correctly and repair any minor indexing issues. It 
is likely that this step is not needed after performing the previous step, but it should only take a few seconds now.&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;myisamchk --force --fast --update-state *.MYI
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, restart MySQL&lt;/p&gt;
&lt;div class="codehilite code"&gt;&lt;pre&gt;service mysqld start
&lt;/pre&gt;&lt;/div&gt;</summary><category term="technical"></category></entry></feed>